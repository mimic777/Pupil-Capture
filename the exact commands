# Follow the steps "Pupil Remote" and 'IPC Backbone' on the website: https://docs.pupil-labs.com/developer/core/network-api/#pupil-remote


# fist, I try to control 'Pupil Capture' by command, and I succeeded.
# I created a new .py file in Pycharm, and entered the following code. 
import zmq
import time

ctx = zmq.Context()
pupil_remote = zmq.Socket(ctx, zmq.REQ)
pupil_remote.connect('tcp://127.0.0.1:50020')

# start recording
pupil_remote.send_string('R')
print(pupil_remote.recv_string())

time.sleep(5)
pupil_remote.send_string('r')
print(pupil_remote.recv_string())






# To output the eye movement data in real time, I created a new .py file in Pycharm again, and entered the following code:
# I run this code and open up the 'Pupil Capture'. After the calibration, the program does not respond.
# From then on, regardless of whether I ran this code or not, every time the calibration ended, the program failed to respond.
import zmq
ctx = zmq.Context()
# The REQ talks to Pupil remote and receives the session unique IPC SUB PORT
pupil_remote = ctx.socket(zmq.REQ)

ip = 'localhost'  # If you talk to a different machine use its IP.
port = 50020  # The port defaults to 50020. Set in Pupil Capture GUI.

pupil_remote.connect(f'tcp://{ip}:{port}')

# Request 'SUB_PORT' for reading data
pupil_remote.send_string('SUB_PORT')
sub_port = pupil_remote.recv_string()

# Request 'PUB_PORT' for writing data
pupil_remote.send_string('PUB_PORT')
pub_port = pupil_remote.recv_string()

# Assumes `sub_port` to be set to the current subscription port
subscriber = ctx.socket(zmq.SUB)
subscriber.connect(f'tcp://{ip}:{sub_port}')
subscriber.subscribe('gaze.')  # receive all gaze messages

# we need a serializer
import msgpack

while True:
    topic, payload = subscriber.recv_multipart()
    message = msgpack.loads(payload)
    print(f"{topic}: {message}")
